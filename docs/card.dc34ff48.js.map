{"version":3,"sources":["node_modules/pokersolver/pokersolver.js","p2.js","index.js"],"names":["pokersolver","require","Hand","suits","ranks","calculateWinRate","playerHand","communityCards","wins","ties","total","unexposedCards","_i","_suits","length","_step","suit","_iterator","_createForOfIteratorHelper","s","n","done","card","value","includes","push","err","e","f","_step2","_iterator2","k_combinations","_step3","community","fullCommunity","concat","playerBestHand","solve","_iterator3","card1","_step4","_iterator4","card2","opponentHand","opponentBestHand","winner","winners","winRate","tieRate","set","k","combinations","helper","start","comb","i","pop","slice","monteCarloSimulation","numSimulations","arguments","undefined","_generateRandomHandAn2","_slicedToArray","generateRandomHandAndCommunity","_step5","_iterator5","_step6","_iterator6","randomIndex","Math","floor","random","splice","numCommunityCardsNeeded","module","exports","_require","window","addValue","document","getElementById","cal","cardNumber","arr","chunk","p","b","element","textContent","result","console","log","toFixed","reset"],"mappings":"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","file":"card.dc34ff48.js","sourceRoot":"..","sourcesContent":["/**\n * pokersolver v2.1.2\n * Copyright (c) 2016, James Simpson of GoldFire Studios\n * http://goldfirestudios.com\n */\n\n(function() {\n  'use strict';\n\n  // NOTE: The 'joker' will be denoted with a value of 'O' and any suit.\n  var values = ['1', '2', '3', '4', '5', '6', '7', '8', '9', 'T', 'J', 'Q', 'K', 'A'];\n\n  /**\n   * Base Card class that defines a single card.\n   */\n  class Card {\n    constructor(str) {\n      this.value = str.substr(0, 1);\n      this.suit = str.substr(1, 1).toLowerCase();\n      this.rank = values.indexOf(this.value);\n      this.wildValue = str.substr(0, 1);\n    }\n\n    toString() {\n      return this.wildValue.replace('T', '10') + this.suit;\n    }\n\n    static sort(a, b) {\n      if (a.rank > b.rank) {\n        return -1;\n      } else if (a.rank < b.rank) {\n        return 1;\n      } else {\n        return 0;\n      }\n    }\n  }\n\n  /**\n   * Base Hand class that handles comparisons of full hands.\n   */\n  class Hand {\n    constructor(cards, name, game, canDisqualify) {\n      this.cardPool = [];\n      this.cards = [];\n      this.suits = {};\n      this.values = [];\n      this.wilds = [];\n      this.name = name;\n      this.game = game;\n      this.sfLength = 0;\n      this.alwaysQualifies = true;\n\n      // Qualification rules apply for dealer's hand.\n      // Also applies for single player games, like video poker.\n      if (canDisqualify && this.game.lowestQualified) {\n        this.alwaysQualifies = false;\n      }\n\n      // Ensure no duplicate cards in standard game.\n      if (game.descr === 'standard' && new Set(cards).size !== cards.length) {\n        throw new Error('Duplicate cards');\n      }\n      \n      // Get rank based on game.\n      var handRank = this.game.handValues.length;\n      for (var i=0; i<this.game.handValues.length; i++) {\n        if (this.game.handValues[i] === this.constructor) {\n          break;\n        }\n      }\n      this.rank = handRank - i;\n\n      // Set up the pool of cards.\n      this.cardPool = cards.map(function(c) {\n        return (typeof c === 'string') ? new Card(c) : c;\n      });\n\n      // Fix the card ranks for wild cards, and sort.\n      for (var i=0; i<this.cardPool.length; i++) {\n        card = this.cardPool[i];\n        if (card.value === this.game.wildValue) {\n          card.rank = -1;\n        }\n      }\n      this.cardPool = this.cardPool.sort(Card.sort);\n\n      // Create the arrays of suits and values.\n      var obj, obj1, key, key1, card;\n      for (var i=0; i<this.cardPool.length; i++) {\n        // Make sure this value already exists in the object.\n        card = this.cardPool[i];\n\n        // We do something special if this is a wild card.\n        if (card.rank === -1) {\n          this.wilds.push(card);\n        } else {\n          (obj = this.suits)[key = card.suit] || (obj[key] = []);\n          (obj1 = this.values)[key1 = card.rank] || (obj1[key1] = []);\n\n          // Add the value to the array for that type in the object.\n          this.suits[card.suit].push(card);\n          this.values[card.rank].push(card);\n        }\n      }\n\n      this.values.reverse();\n      this.isPossible = this.solve();\n    }\n\n    /**\n     * Compare current hand with another to determine which is the winner.\n     * @param  {Hand} a Hand to compare to.\n     * @return {Number}\n     */\n    compare(a) {\n      if (this.rank < a.rank) {\n        return 1;\n      } else if (this.rank > a.rank) {\n        return -1;\n      }\n\n      var result = 0;\n      for (var i=0; i<=4; i++) {\n        if (this.cards[i] && a.cards[i] && this.cards[i].rank < a.cards[i].rank) {\n          result = 1;\n          break;\n        } else if (this.cards[i] && a.cards[i] && this.cards[i].rank > a.cards[i].rank) {\n          result = -1;\n          break;\n        }\n      }\n\n      return result;\n    }\n\n    /**\n     * Determine whether a hand loses to another.\n     * @param  {Hand} hand Hand to compare to.\n     * @return {Boolean}\n     */\n    loseTo(hand) {\n      return (this.compare(hand) > 0);\n    }\n\n    /**\n     * Determine the number of cards in a hand of a rank.\n     * @param  {Number} val Index of this.values.\n     * @return {Number} Number of cards having the rank, including wild cards.\n     */\n    getNumCardsByRank(val) {\n      var cards = this.values[val];\n      var checkCardsLength = (cards) ? cards.length : 0;\n\n      for (var i=0; i<this.wilds.length; i++) {\n        if (this.wilds[i].rank > -1) {\n          continue;\n        } else if (cards) {\n          if (this.game.wildStatus === 1 || cards[0].rank === values.length - 1) {\n            checkCardsLength += 1;\n          }\n        } else if (this.game.wildStatus === 1 || val === values.length - 1) {\n          checkCardsLength += 1;\n        }\n      }\n\n      return checkCardsLength;\n    }\n\n    /**\n     * Determine the cards in a suit for a flush.\n     * @param  {String} suit Key for this.suits.\n     * @param  {Boolean} setRanks Whether to set the ranks for the wild cards.\n     * @return {Array} Cards having the suit, including wild cards.\n     */\n    getCardsForFlush(suit, setRanks) {\n      var cards = (this.suits[suit] || []).sort(Card.sort);\n\n      for (var i=0; i<this.wilds.length; i++) {\n        var wild = this.wilds[i];\n\n        if (setRanks) {\n          var j=0;\n          while (j<values.length && j<cards.length) {\n            if (cards[j].rank === values.length-1-j) {\n              j += 1;\n            } else {\n              break;\n            }\n          }\n          wild.rank = values.length-1-j;\n          wild.wildValue = values[wild.rank];\n        }\n\n        cards.push(wild);\n        cards = cards.sort(Card.sort);\n      }\n\n      return cards;\n    }\n\n    /**\n     * Resets the rank and wild values of the wild cards.\n     */\n    resetWildCards() {\n      for (var i=0; i<this.wilds.length; i++) {\n        this.wilds[i].rank = -1;\n        this.wilds[i].wildValue = this.wilds[i].value;\n      }\n    }\n\n    /**\n     * Highest card comparison.\n     * @return {Array} Highest cards\n     */\n    nextHighest() {\n      var picks;\n      var excluding = [];\n      excluding = excluding.concat(this.cards);\n\n      picks = this.cardPool.filter(function(card) {\n        if (excluding.indexOf(card) < 0) {\n          return true;\n        }\n      });\n\n      // Account for remaining wild card when it must be ace.\n      if (this.game.wildStatus === 0) {\n        for (var i=0; i<picks.length; i++) {\n          var card = picks[i];\n          if (card.rank === -1) {\n            card.wildValue = 'A';\n            card.rank = values.length - 1;\n          }\n        }\n        picks = picks.sort(Card.sort);\n      }\n\n      return picks;\n    }\n\n    /**\n     * Return list of contained cards in human readable format.\n     * @return {String}\n     */\n    toString() {\n      var cards = this.cards.map(function(c) {\n        return c.toString();\n      });\n\n      return cards.join(', ');\n    }\n\n    /**\n     * Return array of contained cards.\n     * @return {Array}\n     */\n    toArray() {\n      var cards = this.cards.map(function(c) {\n        return c.toString();\n      });\n\n      return cards;\n    }\n\n    /**\n     * Determine if qualifying hand.\n     * @return {Boolean}\n     */\n    qualifiesHigh() {\n      if (!this.game.lowestQualified || this.alwaysQualifies) {\n        return true;\n      }\n\n      return (this.compare(Hand.solve(this.game.lowestQualified, this.game)) <= 0);\n    }\n\n    /**\n     * Find highest ranked hands and remove any that don't qualify or lose to another hand.\n     * @param  {Array} hands Hands to evaluate.\n     * @return {Array}       Winning hands.\n     */\n    static winners(hands) {\n      hands = hands.filter(function(h) {\n        return h.qualifiesHigh();\n      });\n\n      var highestRank = Math.max.apply(Math, hands.map(function(h) {\n        return h.rank;\n      }));\n\n      hands = hands.filter(function(h) {\n        return h.rank === highestRank;\n      });\n\n      hands = hands.filter(function(h) {\n        var lose = false;\n        for (var i=0; i<hands.length; i++) {\n          lose = h.loseTo(hands[i]);\n          if (lose) {\n            break;\n          }\n        }\n\n        return !lose;\n      });\n\n      return hands;\n    }\n\n    /**\n     * Build and return the best hand.\n     * @param  {Array} cards Array of cards (['Ad', '3c', 'Th', ...]).\n     * @param  {String} game Game being played.\n     * @param  {Boolean} canDisqualify Check for a qualified hand.\n     * @return {Hand}       Best hand.\n     */\n    static solve(cards, game, canDisqualify) {\n      game = game || 'standard';\n      game = (typeof game === 'string') ? new Game(game) : game;\n      cards = cards || [''];\n\n      var hands = game.handValues;\n      var result = null;\n\n      for (var i=0; i<hands.length; i++) {\n        result = new hands[i](cards, game, canDisqualify);\n        if (result.isPossible) {\n          break;\n        }\n      }\n\n      return result;\n    }\n\n    /**\n     * Separate cards based on if they are wild cards.\n     * @param  {Array} cards Array of cards (['Ad', '3c', 'Th', ...]).\n     * @param  {Game} game Game being played.\n     * @return {Array} [wilds, nonWilds] Wild and non-Wild Cards.\n     */\n    static stripWilds(cards, game) {\n      var card, wilds, nonWilds;\n      cards = cards || [''];\n      wilds = [];\n      nonWilds = [];\n\n      for (var i=0; i<cards.length; i++) {\n        card = cards[i];\n        if (card.rank === -1) {\n          wilds.push(cards[i]);  \n        } else {\n          nonWilds.push(cards[i]);  \n        }\n      }\n\n      return [wilds, nonWilds];\n    }\n  }\n\n  class StraightFlush extends Hand {\n    constructor(cards, game, canDisqualify) {\n      super(cards, 'Straight Flush', game, canDisqualify);\n    }\n\n    solve() {\n      var cards;\n      this.resetWildCards();\n      var possibleStraight = null;\n      var nonCards = [];\n\n      for (var suit in this.suits) {\n        cards = this.getCardsForFlush(suit, false);\n        if (cards && cards.length >= this.game.sfQualify) {\n          possibleStraight = cards;\n          break;\n        } \n      }\n\n      if (possibleStraight) {\n        if (this.game.descr !== 'standard') {\n          for (var suit in this.suits) {\n            if (possibleStraight[0].suit !== suit) {\n              nonCards = nonCards.concat(this.suits[suit] || []);\n              nonCards = Hand.stripWilds(nonCards, this.game)[1];\n            }\n          }\n        }\n        var straight = new Straight(possibleStraight, this.game);\n        if (straight.isPossible) {\n          this.cards = straight.cards;\n          this.cards = this.cards.concat(nonCards);\n          this.sfLength = straight.sfLength;\n        }\n      }\n\n      if (this.cards[0] && this.cards[0].rank === 13) {\n        this.descr = 'Royal Flush';\n      } else if (this.cards.length >= this.game.sfQualify) {\n        this.descr = this.name + ', ' + this.cards[0].toString().slice(0, -1) + suit + ' High';\n      }\n\n      return this.cards.length >= this.game.sfQualify;\n    }\n  }\n\n  class RoyalFlush extends StraightFlush {\n    constructor(cards, game, canDisqualify) {\n      super(cards, game, canDisqualify);\n    }\n\n    solve() {\n      this.resetWildCards();\n      var result = super.solve();\n      return result && this.descr === 'Royal Flush';\n    }\n  }\n\n  class NaturalRoyalFlush extends RoyalFlush {\n    constructor(cards, game, canDisqualify) {\n      super(cards, game, canDisqualify);\n    }\n\n    solve() {\n      var i = 0;\n      this.resetWildCards();\n      var result = super.solve();\n      if (result && this.cards) {\n        for (i=0; i<this.game.sfQualify && i<this.cards.length; i++) {\n          if (this.cards[i].value === this.game.wildValue) {\n            result = false;\n            this.descr = 'Wild Royal Flush';\n            break;\n          }\n        }\n        if (i === this.game.sfQualify) {\n          this.descr = 'Royal Flush';\n        }\n      }\n      return result;\n    }\n  }\n\n  class WildRoyalFlush extends RoyalFlush {\n    constructor(cards, game, canDisqualify) {\n      super(cards, game, canDisqualify);\n    }\n\n    solve() {\n      var i = 0;\n      this.resetWildCards();\n      var result = super.solve();\n      if (result && this.cards) {\n        for (i=0; i<this.game.sfQualify && i<this.cards.length; i++) {\n          if (this.cards[i].value === this.game.wildValue) {\n            this.descr = 'Wild Royal Flush';\n            break;\n          }\n        }\n        if (i === this.game.sfQualify) {\n          result = false;\n          this.descr = 'Royal Flush';\n        }\n      }\n      return result;\n    }\n  }\n\n  class FiveOfAKind extends Hand {\n    constructor(cards, game, canDisqualify) {\n      super(cards, 'Five of a Kind', game, canDisqualify);\n    }\n\n    solve() {\n      this.resetWildCards();\n\n      for (var i=0; i<this.values.length; i++) {\n        if (this.getNumCardsByRank(i) === 5) {\n          this.cards = this.values[i] || [];\n          for (var j=0; j<this.wilds.length && this.cards.length<5; j++) {\n            var wild = this.wilds[j];\n            if (this.cards) {\n              wild.rank = this.cards[0].rank;\n            } else {\n              wild.rank = values.length - 1;\n            }\n            wild.wildValue = values[wild.rank];\n            this.cards.push(wild);\n          }\n          this.cards = this.cards.concat(this.nextHighest().slice(0, this.game.cardsInHand-5));\n          break;\n        }\n      }\n\n      if (this.cards.length >= 5) {\n        this.descr = this.name + ', ' + this.cards[0].toString().slice(0, -1) + '\\'s';\n      }\n\n      return this.cards.length >= 5;\n    }\n  }\n\n  class FourOfAKindPairPlus extends Hand {\n    constructor(cards, game, canDisqualify) {\n      super(cards, 'Four of a Kind with Pair or Better', game, canDisqualify);\n    }\n\n    solve() {\n      var cards;\n      this.resetWildCards();\n\n      for (var i=0; i<this.values.length; i++) {\n        if (this.getNumCardsByRank(i) === 4) {\n          this.cards = this.values[i] || [];\n          for (var j=0; j<this.wilds.length && this.cards.length<4; j++) {\n            var wild = this.wilds[j];\n            if (this.cards) {\n              wild.rank = this.cards[0].rank;\n            } else {\n              wild.rank = values.length - 1;\n            }\n            wild.wildValue = values[wild.rank];\n            this.cards.push(wild);\n          }\n          break;\n        }\n      }\n\n      if (this.cards.length === 4) {\n        for (i=0; i<this.values.length; i++) {\n          cards = this.values[i];\n          if (cards && this.cards[0].wildValue === cards[0].wildValue) {\n            continue;\n          }\n          if (this.getNumCardsByRank(i) >= 2) {\n            this.cards = this.cards.concat(cards || []);\n            for (var j=0; j<this.wilds.length; j++) {\n              var wild = this.wilds[j];\n              if (wild.rank !== -1) {\n                continue;\n              }\n              if (cards) {\n                wild.rank = cards[0].rank;\n              } else if (this.cards[0].rank === values.length - 1 && this.game.wildStatus === 1) {\n                wild.rank = values.length - 2;\n              } else {\n                wild.rank = values.length - 1;\n              }\n              wild.wildValue = values[wild.rank];\n              this.cards.push(wild);\n            }\n            this.cards = this.cards.concat(this.nextHighest().slice(0, this.game.cardsInHand-6));\n            break;\n          }\n        }\n      }\n\n      if (this.cards.length >= 6) {\n        var type = this.cards[0].toString().slice(0, -1) + '\\'s over ' + this.cards[4].toString().slice(0, -1) + '\\'s';\n        this.descr = this.name + ', ' + type;\n      }\n\n      return this.cards.length >= 6;\n    }\n  }\n\n  class FourOfAKind extends Hand {\n    constructor(cards, game, canDisqualify) {\n      super(cards, 'Four of a Kind', game, canDisqualify);\n    }\n\n    solve() {\n      this.resetWildCards();\n\n      for (var i=0; i<this.values.length; i++) {\n        if (this.getNumCardsByRank(i) === 4) {\n          this.cards = this.values[i] || [];\n          for (var j=0; j<this.wilds.length && this.cards.length<4; j++) {\n            var wild = this.wilds[j];\n            if (this.cards) {\n              wild.rank = this.cards[0].rank;\n            } else {\n              wild.rank = values.length - 1;\n            }\n            wild.wildValue = values[wild.rank];\n            this.cards.push(wild);\n          }\n\n          this.cards = this.cards.concat(this.nextHighest().slice(0, this.game.cardsInHand-4));\n          break;\n        }\n      }\n\n      if (this.cards.length >= 4) {\n        if (this.game.noKickers) {\n          this.cards.length = 4;\n        }\n\n        this.descr = this.name + ', ' + this.cards[0].toString().slice(0, -1) + '\\'s';\n      }\n\n      return this.cards.length >= 4;\n    }\n  }\n\n  class FourWilds extends Hand {\n    constructor(cards, game, canDisqualify) {\n      super(cards, 'Four Wild Cards', game, canDisqualify);\n    }\n\n    solve() {\n      if (this.wilds.length === 4) {\n        this.cards = this.wilds;\n        this.cards = this.cards.concat(this.nextHighest().slice(0, this.game.cardsInHand-4));\n      }\n\n      if (this.cards.length >= 4) {\n        if (this.game.noKickers) {\n          this.cards.length = 4;\n        }\n\n        this.descr = this.name;\n      }\n\n      return this.cards.length >= 4;\n    }\n  }\n\n  class ThreeOfAKindTwoPair extends Hand {\n    constructor(cards, game, canDisqualify) {\n      super(cards, 'Three of a Kind with Two Pair', game, canDisqualify);\n    }\n\n    solve() {\n      var cards;\n      this.resetWildCards();\n\n      for (var i=0; i<this.values.length; i++) {\n        if (this.getNumCardsByRank(i) === 3) {\n          this.cards = this.values[i] || [];\n          for (var j=0; j<this.wilds.length && this.cards.length<3; j++) {\n            var wild = this.wilds[j];\n            if (this.cards) {\n              wild.rank = this.cards[0].rank;\n            } else {\n              wild.rank = values.length - 1;\n            }\n            wild.wildValue = values[wild.rank];\n            this.cards.push(wild);\n          }\n          break;\n        }\n      }\n\n      if (this.cards.length === 3) {\n        for (var i=0; i<this.values.length; i++) {\n          var cards = this.values[i];\n          if (cards && this.cards[0].wildValue === cards[0].wildValue) {\n            continue;\n          }\n          if (this.cards.length > 5 && this.getNumCardsByRank(i) === 2) {\n            this.cards = this.cards.concat(cards || []);\n            for (var j=0; j<this.wilds.length; j++) {\n              var wild = this.wilds[j];\n              if (wild.rank !== -1) {\n                continue;\n              }\n              if (cards) {\n                wild.rank = cards[0].rank;\n              } else if (this.cards[0].rank === values.length - 1 && this.game.wildStatus === 1) {\n                wild.rank = values.length - 2;\n              } else {\n                wild.rank = values.length - 1;\n              }\n              wild.wildValue = values[wild.rank];\n              this.cards.push(wild);\n            }\n            this.cards = this.cards.concat(this.nextHighest().slice(0, this.game.cardsInHand-4));\n            break;\n          } else if (this.getNumCardsByRank(i) === 2) {\n            this.cards = this.cards.concat(cards);\n            for (var j=0; j<this.wilds.length; j++) {\n              var wild = this.wilds[j];\n              if (wild.rank !== -1) {\n                continue;\n              }\n              if (cards) {\n                wild.rank = cards[0].rank;\n              } else if (this.cards[0].rank === values.length - 1 && this.game.wildStatus === 1) {\n                wild.rank = values.length - 2;\n              } else {\n                wild.rank = values.length - 1;\n              }\n              wild.wildValue = values[wild.rank];\n              this.cards.push(wild);\n            }\n          }\n        }\n      }\n\n      if (this.cards.length >= 7) {\n        var type = this.cards[0].toString().slice(0, -1) + '\\'s over ' + this.cards[3].toString().slice(0, -1) + '\\'s & ' + this.cards[5].value + '\\'s';\n        this.descr = this.name + ', ' + type;\n      }\n\n      return this.cards.length >= 7;\n    }\n  }\n\n  class FullHouse extends Hand {\n    constructor(cards, game, canDisqualify) {\n      super(cards, 'Full House', game, canDisqualify);\n    }\n\n    solve() {\n      var cards;\n      this.resetWildCards();\n\n      for (var i=0; i<this.values.length; i++) {\n        if (this.getNumCardsByRank(i) === 3) {\n          this.cards = this.values[i] || [];\n          for (var j=0; j<this.wilds.length && this.cards.length<3; j++) {\n            var wild = this.wilds[j];\n            if (this.cards) {\n              wild.rank = this.cards[0].rank;\n            } else {\n              wild.rank = values.length - 1;\n            }\n            wild.wildValue = values[wild.rank];\n            this.cards.push(wild);\n          }\n          break;\n        }\n      }\n\n      if (this.cards.length === 3) {\n        for (i=0; i<this.values.length; i++) {\n          cards = this.values[i];\n          if (cards && this.cards[0].wildValue === cards[0].wildValue) {\n            continue;\n          }\n          if (this.getNumCardsByRank(i) >= 2) {\n            this.cards = this.cards.concat(cards || []);\n            for (var j=0; j<this.wilds.length; j++) {\n              var wild = this.wilds[j];\n              if (wild.rank !== -1) {\n                continue;\n              }\n              if (cards) {\n                wild.rank = cards[0].rank;\n              } else if (this.cards[0].rank === values.length - 1 && this.game.wildStatus === 1) {\n                wild.rank = values.length - 2;\n              } else {\n                wild.rank = values.length - 1;\n              }\n              wild.wildValue = values[wild.rank];\n              this.cards.push(wild);\n            }\n            this.cards = this.cards.concat(this.nextHighest().slice(0, this.game.cardsInHand-5));\n            break;\n          }\n        }\n      }\n\n      if (this.cards.length >= 5) {\n        var type = this.cards[0].toString().slice(0, -1) + '\\'s over ' + this.cards[3].toString().slice(0, -1) + '\\'s';\n        this.descr = this.name + ', ' + type;\n      }\n\n      return this.cards.length >= 5;\n    }\n  }\n\n  class Flush extends Hand {\n    constructor(cards, game, canDisqualify) {\n      super(cards, 'Flush', game, canDisqualify);\n    }\n\n    solve() {\n      this.sfLength = 0;\n      this.resetWildCards();\n\n      for (var suit in this.suits) {\n        var cards = this.getCardsForFlush(suit, true);\n        if (cards.length >= this.game.sfQualify) {\n          this.cards = cards;\n          break;\n        }\n      }\n\n      if (this.cards.length >= this.game.sfQualify) {\n        this.descr = this.name + ', ' + this.cards[0].toString().slice(0, -1) + suit + ' High';\n        this.sfLength = this.cards.length;\n        if (this.cards.length < this.game.cardsInHand) {\n          this.cards = this.cards.concat(this.nextHighest().slice(0, this.game.cardsInHand-this.cards.length));\n        }\n      }\n\n      return this.cards.length >= this.game.sfQualify;\n    }\n  }\n\n  class Straight extends Hand {\n    constructor(cards, game, canDisqualify) {\n      super(cards, 'Straight', game, canDisqualify);\n    }\n\n    solve() {\n      var card, checkCards;\n      this.resetWildCards();\n\n      // There are still some games that count the wheel as second highest.\n      // These games do not have enough cards/wilds to make AKQJT and 5432A both possible.\n      if (this.game.wheelStatus === 1) {\n        this.cards = this.getWheel();\n        if (this.cards.length) {\n          var wildCount = 0;\n          for (var i=0; i<this.cards.length; i++) {\n            card = this.cards[i];\n            if (card.value === this.game.wildValue) {\n              wildCount += 1;\n            }\n            if (card.rank === 0) {\n              card.rank = values.indexOf('A');\n              card.wildValue = 'A';\n              if (card.value === '1') {\n                card.value = 'A';\n              }\n            }\n          }\n          this.cards = this.cards.sort(Card.sort);\n          for (; wildCount<this.wilds.length && this.cards.length < this.game.cardsInHand; wildCount++) {\n            card = this.wilds[wildCount];\n            card.rank = values.indexOf('A');\n            card.wildValue = 'A';\n            this.cards.push(card);\n          }\n          this.descr = this.name + ', Wheel';\n          this.sfLength = this.sfQualify;\n          if (this.cards[0].value === 'A') {\n            this.cards = this.cards.concat(this.nextHighest().slice(1, this.game.cardsInHand-this.cards.length+1));\n          } else {\n            this.cards = this.cards.concat(this.nextHighest().slice(0, this.game.cardsInHand-this.cards.length));\n          }\n          return true;\n        }\n        this.resetWildCards();\n      }\n\n      this.cards = this.getGaps();\n\n      // Now add the wild cards, if any, and set the appropriate ranks\n      for (var i=0; i<this.wilds.length; i++) {\n        card = this.wilds[i];\n        checkCards = this.getGaps(this.cards.length);\n        if (this.cards.length === checkCards.length) {\n          // This is an \"open-ended\" straight, the high rank is the highest possible rank.\n          if (this.cards[0].rank < (values.length - 1)) {\n            card.rank = this.cards[0].rank + 1;\n            card.wildValue = values[card.rank];\n            this.cards.push(card);\n          } else {\n            card.rank = this.cards[this.cards.length - 1].rank - 1;\n            card.wildValue = values[card.rank];\n            this.cards.push(card);\n          }\n        } else {\n          // This is an \"inside\" straight, the high card doesn't change.\n          for (var j=1; j<this.cards.length; j++) {\n            if (this.cards[j-1].rank - this.cards[j].rank > 1) {\n              card.rank = this.cards[j-1].rank - 1;\n              card.wildValue = values[card.rank];\n              this.cards.push(card);\n              break;\n            }\n          }\n        }\n        this.cards = this.cards.sort(Card.sort);\n      }\n      if (this.cards.length >= this.game.sfQualify) {\n        this.descr = this.name + ', ' + this.cards[0].toString().slice(0, -1) + ' High';\n        this.cards = this.cards.slice(0, this.game.cardsInHand);\n        this.sfLength = this.cards.length;\n        if (this.cards.length < this.game.cardsInHand) {\n          if (this.cards[this.sfLength-1].rank === 0) {\n            this.cards = this.cards.concat(this.nextHighest().slice(1, this.game.cardsInHand-this.cards.length+1));\n          } else {\n            this.cards = this.cards.concat(this.nextHighest().slice(0, this.game.cardsInHand-this.cards.length));\n          }\n        }\n      }\n\n      return this.cards.length >= this.game.sfQualify;\n    }\n\n    /**\n     * Get the number of gaps in the straight.\n     * @return {Array} Highest potential straight with fewest number of gaps.\n     */\n    getGaps(checkHandLength) {\n      var wildCards, cardsToCheck, i, card, gapCards, cardsList, gapCount, prevCard, diff;\n\n      var stripReturn = Hand.stripWilds(this.cardPool, this.game);\n      wildCards = stripReturn[0];\n      cardsToCheck = stripReturn[1];\n\n      for (i=0; i<cardsToCheck.length; i++) {\n        card = cardsToCheck[i];\n        if (card.wildValue === 'A') {\n          cardsToCheck.push(new Card('1' + card.suit));\n        }\n      }\n      cardsToCheck = cardsToCheck.sort(Card.sort);\n\n      if (checkHandLength) {\n        i = cardsToCheck[0].rank + 1;\n      } else {\n        checkHandLength = this.game.sfQualify;\n        i = values.length;\n      }\n\n      gapCards = [];\n      for (; i>0; i--) {\n        cardsList = [];\n        gapCount = 0;\n        for (var j=0; j<cardsToCheck.length; j++) {\n          card = cardsToCheck[j];\n          if (card.rank > i) {\n            continue;\n          }\n          prevCard = cardsList[cardsList.length - 1];\n          diff = (prevCard) ? prevCard.rank - card.rank : i - card.rank;\n\n          if (diff === null) {\n            cardsList.push(card);\n          } else if (checkHandLength < (gapCount + diff + cardsList.length)) {\n            break;\n          } else if (diff > 0) {\n            cardsList.push(card);\n            gapCount += (diff - 1);\n          }\n        }\n        if (cardsList.length > gapCards.length) {\n          gapCards = cardsList.slice();\n        }\n        if (this.game.sfQualify - gapCards.length <= wildCards.length) {\n          break;\n        }\n      }\n\n      return gapCards;\n    }\n\n    getWheel() {\n      var wildCards, cardsToCheck, i, card, wheelCards, wildCount, cardFound;\n\n      var stripReturn = Hand.stripWilds(this.cardPool, this.game);\n      wildCards = stripReturn[0];\n      cardsToCheck = stripReturn[1];\n\n      for (i=0; i<cardsToCheck.length; i++) {\n        card = cardsToCheck[i];\n        if (card.wildValue === 'A') {\n          cardsToCheck.push(new Card('1' + card.suit));\n        }\n      }\n      cardsToCheck = cardsToCheck.sort(Card.sort);\n\n      wheelCards = [];\n      wildCount = 0;\n      for (i = this.game.sfQualify-1; i>=0; i--) {\n        cardFound = false;\n        for (var j=0; j<cardsToCheck.length; j++) {\n          card = cardsToCheck[j];\n          if (card.rank > i) {\n            continue;\n          }\n          if (card.rank < i) {\n            break;\n          }\n          wheelCards.push(card);\n          cardFound = true;\n          break;\n        }\n        if (!cardFound) {\n          if (wildCount < wildCards.length) {\n            wildCards[wildCount].rank = i;\n            wildCards[wildCount].wildValue = values[i];\n            wheelCards.push(wildCards[wildCount]);\n            wildCount += 1;\n          } else {\n            return [];\n          }\n        }\n      }\n\n      return wheelCards;\n    }\n  }\n\n  class TwoThreeOfAKind extends Hand {\n    constructor(cards, game, canDisqualify) {\n      super(cards, 'Two Three Of a Kind', game, canDisqualify);\n    }\n\n    solve() {\n      this.resetWildCards();\n      for (var i=0; i<this.values.length; i++) {\n        var cards = this.values[i];\n        if (this.cards.length > 0 && this.getNumCardsByRank(i) === 3) {\n          this.cards = this.cards.concat(cards || []);\n          for (var j=0; j<this.wilds.length; j++) {\n            var wild = this.wilds[j];\n            if (wild.rank !== -1) {\n              continue;\n            }\n            if (cards) {\n              wild.rank = cards[0].rank;\n            } else if (this.cards[0].rank === values.length - 1 && this.game.wildStatus === 1) {\n              wild.rank = values.length - 2;\n            } else {\n              wild.rank = values.length - 1;\n            }\n            wild.wildValue = values[wild.rank];\n            this.cards.push(wild);\n          }\n          this.cards = this.cards.concat(this.nextHighest().slice(0, this.game.cardsInHand-6));\n          break;\n        } else if (this.getNumCardsByRank(i) === 3) {\n          this.cards = this.cards.concat(cards);\n          for (var j=0; j<this.wilds.length; j++) {\n            var wild = this.wilds[j];\n            if (wild.rank !== -1) {\n              continue;\n            }\n            if (cards) {\n              wild.rank = cards[0].rank;\n            } else if (this.cards[0].rank === values.length - 1 && this.game.wildStatus === 1) {\n              wild.rank = values.length - 2;\n            } else {\n              wild.rank = values.length - 1;\n            }\n            wild.wildValue = values[wild.rank];\n            this.cards.push(wild);\n          }\n        }\n      }\n\n      if (this.cards.length >= 6) {\n        var type = this.cards[0].toString().slice(0, -1) + '\\'s & ' + this.cards[3].toString().slice(0, -1) + '\\'s';\n        this.descr = this.name + ', ' + type;\n      }\n\n      return this.cards.length >= 6;\n    }\n  }\n\n  class ThreeOfAKind extends Hand {\n    constructor(cards, game, canDisqualify) {\n      super(cards, 'Three of a Kind', game, canDisqualify);\n    }\n\n    solve() {\n      this.resetWildCards();\n\n      for (var i=0; i<this.values.length; i++) {\n        if (this.getNumCardsByRank(i) === 3) {\n          this.cards = this.values[i] || [];\n          for (var j=0; j<this.wilds.length && this.cards.length<3; j++) {\n            var wild = this.wilds[j];\n            if (this.cards) {\n              wild.rank = this.cards[0].rank;\n            } else {\n              wild.rank = values.length - 1;\n            }\n            wild.wildValue = values[wild.rank];\n            this.cards.push(wild);\n          }\n          this.cards = this.cards.concat(this.nextHighest().slice(0, this.game.cardsInHand-3));\n          break;\n        }\n      }\n\n      if (this.cards.length >= 3) {\n        if (this.game.noKickers) {\n          this.cards.length = 3;\n        }\n\n        this.descr = this.name + ', ' + this.cards[0].toString().slice(0, -1) + '\\'s';\n      }\n\n      return this.cards.length >= 3;\n    }\n  }\n\n  class ThreePair extends Hand {\n    constructor(cards, game, canDisqualify) {\n      super(cards, 'Three Pair', game, canDisqualify);\n    }\n\n    solve() {\n      this.resetWildCards();\n\n      for (var i=0; i<this.values.length; i++) {\n        var cards = this.values[i];\n        if (this.cards.length > 2 && this.getNumCardsByRank(i) === 2) {\n          this.cards = this.cards.concat(cards || []);\n          for (var j=0; j<this.wilds.length; j++) {\n            var wild = this.wilds[j];\n            if (wild.rank !== -1) {\n              continue;\n            }\n            if (cards) {\n              wild.rank = cards[0].rank;\n            } else if (this.cards[0].rank === values.length - 1 && this.game.wildStatus === 1) {\n              wild.rank = values.length - 2;\n            } else {\n              wild.rank = values.length - 1;\n            }\n            wild.wildValue = values[wild.rank];\n            this.cards.push(wild);\n          }\n          this.cards = this.cards.concat(this.nextHighest().slice(0, this.game.cardsInHand-6));\n          break;\n        } else if (this.cards.length > 0 && this.getNumCardsByRank(i) === 2) {\n          this.cards = this.cards.concat(cards || []);\n          for (var j=0; j<this.wilds.length; j++) {\n            var wild = this.wilds[j];\n            if (wild.rank !== -1) {\n              continue;\n            }\n            if (cards) {\n              wild.rank = cards[0].rank;\n            } else if (this.cards[0].rank === values.length - 1 && this.game.wildStatus === 1) {\n              wild.rank = values.length - 2;\n            } else {\n              wild.rank = values.length - 1;\n            }\n            wild.wildValue = values[wild.rank];\n            this.cards.push(wild);\n          }\n        } else if (this.getNumCardsByRank(i) === 2) {\n          this.cards = this.cards.concat(cards);\n          for (var j=0; j<this.wilds.length; j++) {\n            var wild = this.wilds[j];\n            if (wild.rank !== -1) {\n              continue;\n            }\n            if (cards) {\n              wild.rank = cards[0].rank;\n            } else if (this.cards[0].rank === values.length - 1 && this.game.wildStatus === 1) {\n              wild.rank = values.length - 2;\n            } else {\n              wild.rank = values.length - 1;\n            }\n            wild.wildValue = values[wild.rank];\n            this.cards.push(wild);\n          }\n        }\n      }\n\n      if (this.cards.length >= 6) {\n        var type = this.cards[0].toString().slice(0, -1) + '\\'s & ' + this.cards[2].toString().slice(0, -1) + '\\'s & ' + this.cards[4].toString().slice(0, -1) + '\\'s';\n        this.descr = this.name + ', ' + type;\n      }\n\n      return this.cards.length >= 6;\n    }\n  }\n\n  class TwoPair extends Hand {\n    constructor(cards, game, canDisqualify) {\n      super(cards, 'Two Pair', game, canDisqualify);\n    }\n\n    solve() {\n      this.resetWildCards();\n\n      for (var i=0; i<this.values.length; i++) {\n        var cards = this.values[i];\n        if (this.cards.length > 0 && this.getNumCardsByRank(i) === 2) {\n          this.cards = this.cards.concat(cards || []);\n          for (var j=0; j<this.wilds.length; j++) {\n            var wild = this.wilds[j];\n            if (wild.rank !== -1) {\n              continue;\n            }\n            if (cards) {\n              wild.rank = cards[0].rank;\n            } else if (this.cards[0].rank === values.length - 1 && this.game.wildStatus === 1) {\n              wild.rank = values.length - 2;\n            } else {\n              wild.rank = values.length - 1;\n            }\n            wild.wildValue = values[wild.rank];\n            this.cards.push(wild);\n          }\n          this.cards = this.cards.concat(this.nextHighest().slice(0, this.game.cardsInHand-4));\n          break;\n        } else if (this.getNumCardsByRank(i) === 2) {\n          this.cards = this.cards.concat(cards);\n          for (var j=0; j<this.wilds.length; j++) {\n            var wild = this.wilds[j];\n            if (wild.rank !== -1) {\n              continue;\n            }\n            if (cards) {\n              wild.rank = cards[0].rank;\n            } else if (this.cards[0].rank === values.length - 1 && this.game.wildStatus === 1) {\n              wild.rank = values.length - 2;\n            } else {\n              wild.rank = values.length - 1;\n            }\n            wild.wildValue = values[wild.rank];\n            this.cards.push(wild);\n          }\n        }\n      }\n\n      if (this.cards.length >= 4) {\n        if (this.game.noKickers) {\n          this.cards.length = 4;\n        }\n\n        var type = this.cards[0].toString().slice(0, -1) + '\\'s & ' + this.cards[2].toString().slice(0, -1) + '\\'s';\n        this.descr = this.name + ', ' + type;\n      }\n\n      return this.cards.length >= 4;\n    }\n  }\n\n  class OnePair extends Hand {\n    constructor(cards, game, canDisqualify) {\n      super(cards, 'Pair', game, canDisqualify);\n    }\n\n    solve() {\n      this.resetWildCards();\n\n      for (var i=0; i<this.values.length; i++) {\n        if (this.getNumCardsByRank(i) === 2) {\n          this.cards = this.cards.concat(this.values[i] || []);\n          for (var j=0; j<this.wilds.length && this.cards.length<2; j++) {\n            var wild = this.wilds[j];\n            if (this.cards) {\n              wild.rank = this.cards[0].rank;\n            } else {\n              wild.rank = values.length - 1;\n            }\n            wild.wildValue = values[wild.rank];\n            this.cards.push(wild);\n          }\n          this.cards = this.cards.concat(this.nextHighest().slice(0, this.game.cardsInHand-2));\n          break;\n        }\n      }\n\n      if (this.cards.length >= 2) {\n        if (this.game.noKickers) {\n          this.cards.length = 2;\n        }\n\n        this.descr = this.name + ', ' + this.cards[0].toString().slice(0, -1) + '\\'s';\n      }\n\n      return this.cards.length >= 2;\n    }\n  }\n\n  class HighCard extends Hand {\n    constructor(cards, game, canDisqualify) {\n      super(cards, 'High Card', game, canDisqualify);\n    }\n\n    solve() {\n      this.cards = this.cardPool.slice(0, this.game.cardsInHand);\n\n      for (var i=0; i<this.cards.length; i++) {\n        var card = this.cards[i];\n        if (this.cards[i].value === this.game.wildValue) {\n          this.cards[i].wildValue = 'A';\n          this.cards[i].rank = values.indexOf('A');\n        }\n      }\n\n      if (this.game.noKickers) {\n        this.cards.length = 1;\n      }\n\n      this.cards = this.cards.sort(Card.sort);\n      this.descr = this.cards[0].toString().slice(0, -1) + ' High';\n\n      return true;\n    }\n  }\n\n  /*\n   * Base class for handling Pai Gow Poker hands.\n   * House Way is in accordance with the MGM Grand Casino, Las Vegas NV.\n   * http://wizardofodds.com/games/pai-gow-poker/house-way/mgm/\n   * EXCEPTION: With Four of a Kind and S/F, preserve the S/F, just like Three of a Kind.\n   */\n  class PaiGowPokerHelper {\n    /*\n     * Constructor class.\n     * @param {Hand} hand Solved hand against Game 'paigowpokerfull'.\n     */\n    constructor(hand) {\n      this.baseHand = null;\n      this.hiHand = null;\n      this.loHand = null;\n      this.game = null;\n      this.loGame = new Game('paigowpokerlo');\n      this.hiGame = new Game('paigowpokerhi');\n\n      if (Array.isArray(hand)) {\n        this.baseHand = Hand.solve(hand, new Game('paigowpokerfull'));\n      } else {\n        this.baseHand = hand;\n      }\n\n      this.game = this.baseHand.game;\n    }\n\n    /*\n     * Set a full hand into high and low hands, according to House Way.\n     */\n    splitHouseWay() {\n      var hiCards, loCards;\n      var rank = this.game.handValues.length - this.baseHand.rank;\n      var handValue = this.game.handValues[rank];\n\n      if (handValue === FiveOfAKind) {\n        if (this.baseHand.cards[5].value === 'K' && this.baseHand.cards[6].value === 'K') {\n          loCards = this.baseHand.cards.slice(5, 7);\n          hiCards = this.baseHand.cards.slice(0, 5);\n        } else {\n          loCards = this.baseHand.cards.slice(0, 2);\n          hiCards = this.baseHand.cards.slice(2, 7);\n        }\n      } else if (handValue === FourOfAKindPairPlus) {\n        if (this.baseHand.cards[0].wildValue === 'A' && this.baseHand.cards[4].value !== 'K') {\n          hiCards = this.baseHand.cards.slice(0, 2);\n          loCards = this.baseHand.cards.slice(2, 4);\n          hiCards = hiCards.concat(this.baseHand.cards.slice(4, 7));\n        } else {\n          hiCards = this.baseHand.cards.slice(0, 4);\n          loCards = this.baseHand.cards.slice(4, 6);\n          hiCards.push(this.baseHand.cards[6]);\n        }\n      } else if (handValue === StraightFlush || handValue === Flush || handValue === Straight) {\n        var sfReturn;\n        var altGame = new Game('paigowpokeralt');\n        var altHand = Hand.solve(this.baseHand.cards, altGame);\n        var altRank = altGame.handValues.length - altHand.rank;\n        if (altGame.handValues[altRank] === FourOfAKind) {\n          sfReturn = this.getSFData(altHand.cards);\n          hiCards = sfReturn[0];\n          loCards = sfReturn[1];\n        } else if (altGame.handValues[altRank] === FullHouse) {\n          hiCards = altHand.cards.slice(0, 3);\n          loCards = altHand.cards.slice(3, 5);\n          hiCards = hiCards.concat(altHand.cards.slice(5, 7));\n        } else if (altGame.handValues[altRank] === ThreeOfAKind) {\n          sfReturn = this.getSFData(altHand.cards);\n          hiCards = sfReturn[0];\n          loCards = sfReturn[1];\n        } else if (altGame.handValues[altRank] === ThreePair) {\n          loCards = altHand.cards.slice(0, 2);\n          hiCards = altHand.cards.slice(2, 7);\n        } else if (altGame.handValues[altRank] === TwoPair) {\n          if (altHand.cards[0].rank < 6) {\n            if (altHand.cards[4].wildValue === 'A') {\n              hiCards = altHand.cards.slice(0, 4);\n              loCards = altHand.cards.slice(4, 6);\n              hiCards.push(altHand.cards[6]);\n            } else {\n              sfReturn = this.getSFData(altHand.cards);\n              hiCards = sfReturn[0];\n              loCards = sfReturn[1];\n            }\n          } else if (altHand.cards[0].rank < 10) {\n            if (altHand.cards[4].wildValue === 'A') {\n              hiCards = altHand.cards.slice(0, 4);\n              loCards = altHand.cards.slice(4, 6);\n              hiCards.push(altHand.cards[6]);\n            } else {\n              hiCards = altHand.cards.slice(0, 2);\n              loCards = altHand.cards.slice(2, 4);\n              hiCards = hiCards.concat(altHand.cards.slice(4, 7));\n            }\n          } else if (altHand.cards[0].wildValue !== 'A' && altHand.cards[2].rank < 6 && altHand.cards[4].wildValue === 'A') {\n            hiCards = altHand.cards.slice(0, 4);\n            loCards = altHand.cards.slice(4, 6);\n            hiCards.push(altHand.cards[6]);\n          } else {\n            hiCards = altHand.cards.slice(0, 2);\n            loCards = altHand.cards.slice(2, 4);\n            hiCards = hiCards.concat(altHand.cards.slice(4, 7));\n          }\n        } else if (altGame.handValues[altRank] === OnePair) {\n          if (altHand.cards[0].rank >= values.indexOf('T') && altHand.cards[0].rank <= values.indexOf('K') && altHand.cards[2].wildValue === 'A') {\n            var possibleSF = altHand.cards.slice(0, 2);\n            possibleSF = possibleSF.concat(altHand.cards.slice(3, 7));\n            sfReturn = this.getSFData(possibleSF);\n            if (sfReturn[0]) {\n              hiCards = sfReturn[0];\n              loCards = sfReturn[1];\n              loCards.push(altHand.cards[2]);\n            } else {\n              hiCards = altHand.cards.slice(0, 2);\n              loCards = altHand.cards.slice(2, 4);\n              hiCards = hiCards.concat(altHand.cards.slice(4, 7));\n            }\n          } else {\n            sfReturn = this.getSFData(altHand.cards.slice(2, 7));\n            if (sfReturn[0]) {\n              hiCards = sfReturn[0];\n              loCards = altHand.cards.slice(0, 2);\n            } else {\n              sfReturn = this.getSFData(altHand.cards);\n              hiCards = sfReturn[0];\n              loCards = sfReturn[1];\n            }\n          }\n        } else {\n          sfReturn = this.getSFData(altHand.cards);\n          hiCards = sfReturn[0];\n          loCards = sfReturn[1];\n        }\n      } else if (handValue === FourOfAKind) {\n        if (this.baseHand.cards[0].rank < 6) {\n          hiCards = this.baseHand.cards.slice(0, 4);\n          loCards = this.baseHand.cards.slice(4, 6);\n          hiCards.push(this.baseHand.cards[6]);\n        } else if (this.baseHand.cards[0].rank < 10 && this.baseHand.cards[4].wildValue === 'A') {\n          hiCards = this.baseHand.cards.slice(0, 4);\n          loCards = this.baseHand.cards.slice(4, 6);\n          hiCards.push(this.baseHand.cards[6]);\n        } else {\n          hiCards = this.baseHand.cards.slice(0, 2);\n          loCards = this.baseHand.cards.slice(2, 4);\n          hiCards = hiCards.concat(this.baseHand.cards.slice(4, 7));\n        }\n      } else if (handValue === TwoThreeOfAKind) {\n        loCards = this.baseHand.cards.slice(0, 2);\n        hiCards = this.baseHand.cards.slice(3, 6);\n        hiCards.push(this.baseHand.cards[2]);\n        hiCards.push(this.baseHand.cards[6]);\n      } else if (handValue === ThreeOfAKindTwoPair) {\n        hiCards = this.baseHand.cards.slice(0, 3);\n        loCards = this.baseHand.cards.slice(3, 5);\n        hiCards = hiCards.concat(this.baseHand.cards.slice(5, 7));\n      } else if (handValue === FullHouse) {\n        if (this.baseHand.cards[3].wildValue === '2' && this.baseHand.cards[5].wildValue === 'A' && this.baseHand.cards[6].wildValue === 'K') {\n          hiCards = this.baseHand.cards.slice(0, 5);\n          loCards = this.baseHand.cards.slice(5, 7);\n        } else {\n          hiCards = this.baseHand.cards.slice(0, 3);\n          loCards = this.baseHand.cards.slice(3, 5);\n          hiCards = hiCards.concat(this.baseHand.cards.slice(5, 7));\n        }\n      } else if (handValue === ThreeOfAKind) {\n        if (this.baseHand.cards[0].wildValue === 'A') {\n          hiCards = this.baseHand.cards.slice(0, 2);\n          loCards = this.baseHand.cards.slice(2, 4);\n          hiCards = hiCards.concat(this.baseHand.cards.slice(4, 7));\n        } else {\n          hiCards = this.baseHand.cards.slice(0, 3);\n          loCards = this.baseHand.cards.slice(3, 5);\n          hiCards = hiCards.concat(this.baseHand.cards.slice(5, 7));\n        }\n      } else if (handValue === ThreePair) {\n        loCards = this.baseHand.cards.slice(0, 2);\n        hiCards = this.baseHand.cards.slice(2, 7);\n      } else if (handValue === TwoPair) {\n        if (this.baseHand.cards[0].rank < 6) {\n          hiCards = this.baseHand.cards.slice(0, 4);\n          loCards = this.baseHand.cards.slice(4, 6);\n          hiCards.push(this.baseHand.cards[6]);\n        } else if (this.baseHand.cards[0].rank < 10) {\n          if (this.baseHand.cards[4].wildValue === 'A') {\n            hiCards = this.baseHand.cards.slice(0, 4);\n            loCards = this.baseHand.cards.slice(4, 6);\n            hiCards.push(this.baseHand.cards[6]);\n          } else {\n            hiCards = this.baseHand.cards.slice(0, 2);\n            loCards = this.baseHand.cards.slice(2, 4);\n            hiCards = hiCards.concat(this.baseHand.cards.slice(4, 7));\n          }\n        } else if (this.baseHand.cards[0].wildValue !== 'A' && this.baseHand.cards[2].rank < 6 && this.baseHand.cards[4].wildValue === 'A') {\n          hiCards = this.baseHand.cards.slice(0, 4);\n          loCards = this.baseHand.cards.slice(4, 6);\n          hiCards.push(this.baseHand.cards[6]);\n        } else {\n          hiCards = this.baseHand.cards.slice(0, 2);\n          loCards = this.baseHand.cards.slice(2, 4);\n          hiCards = hiCards.concat(this.baseHand.cards.slice(4, 7));\n        }\n      } else if (handValue === OnePair) {\n        hiCards = this.baseHand.cards.slice(0, 2);\n        loCards = this.baseHand.cards.slice(2, 4);\n        hiCards = hiCards.concat(this.baseHand.cards.slice(4, 7));\n      } else {\n        hiCards = [this.baseHand.cards[0]];\n        loCards = this.baseHand.cards.slice(1, 3);\n        hiCards = hiCards.concat(this.baseHand.cards.slice(3, 7));\n      }\n\n      this.hiHand = Hand.solve(hiCards, this.hiGame);\n      this.loHand = Hand.solve(loCards, this.loGame);\n    }\n\n    /*\n     * Determine the best possible Straight and/or Flush.\n     * @param  {Array} cards 5-7 Card objects to check.\n     * @return {Array} [hiCards, loCards] High and Low components, if any.\n     */\n    getSFData(cards) {\n      var hiCards, possibleLoCards, bestLoCards, bestHand;\n      var handsToCheck = [\n        new StraightFlush(cards, new Game('paigowpokersf7')),\n        new StraightFlush(cards, new Game('paigowpokersf6')),\n        new StraightFlush(cards, this.game),\n        new Flush(cards, new Game('paigowpokersf7')),\n        new Flush(cards, new Game('paigowpokersf6')),\n        new Flush(cards, this.game),\n        new Straight(cards, new Game('paigowpokersf7')),\n        new Straight(cards, new Game('paigowpokersf6')),\n        new Straight(cards, this.game)\n      ];\n\n      for (var i=0; i<handsToCheck.length; i++) {\n        var hand = handsToCheck[i];\n        if (hand.isPossible) {\n          if (hand.sfLength === 7) {\n            possibleLoCards = [hand.cards[0], hand.cards[1]];\n          } else if (hand.sfLength === 6) {\n            possibleLoCards = [hand.cards[0]];\n            if (cards.length > 6) {\n              possibleLoCards.push(hand.cards[6]);\n            }\n          } else if (cards.length > 5) {\n            possibleLoCards = [hand.cards[5]];\n            if (cards.length > 6) {\n              possibleLoCards.push(hand.cards[6]);\n            }\n          }\n          if (possibleLoCards) {\n            possibleLoCards = possibleLoCards.sort(Card.sort);\n            if (!bestLoCards || bestLoCards[0].rank < possibleLoCards[0].rank || (bestLoCards.length > 1 && bestLoCards[0].rank === possibleLoCards[0].rank && bestLoCards[1].rank < possibleLoCards[1].rank)) {\n              bestLoCards = possibleLoCards;\n              bestHand = hand;\n            }\n          } else if (!bestHand) {\n            bestHand = hand;\n            break;\n          }\n        }\n      }\n\n      if (bestHand) {\n        if (bestHand.sfLength === 7) {\n          hiCards = bestHand.cards.slice(2, 7);\n        } else if (bestHand.sfLength === 6) {\n          hiCards = bestHand.cards.slice(1, 6);\n        } else {\n          hiCards = bestHand.cards.slice(0, 5);\n        }\n      }\n\n      return [hiCards, bestLoCards];\n    }\n\n    /*\n     * Determine if the setting of the hands is valid. Hi must be higher than lo.\n     * @return {Boolean}\n     */\n    qualifiesValid() {\n      var compareHands = Hand.winners([this.hiHand, this.loHand]);\n\n      return !(compareHands.length === 1 && compareHands[0] === this.loHand);\n    }\n\n    /**\n     * Find which of two split hands is best, according to rules.\n     * @param  {PaiGowPokerHelper} player Player hand to evaluate. Must be set.\n     * @param  {PaiGowPokerHelper} banker Banker hand to evaluate. Must be set.\n     * @param  {int}               winner Winning party, if any.\n     *                                    Player = 1, Banker = -1, Push = 0\n     */\n    static winners(player, banker) {\n      if (!player.qualifiesValid()) {\n        if (banker.qualifiesValid()) {\n          return -1;\n        }\n        // Probably shouldn't get here because the dealer must set house way.\n        // However, we'll still have it as a sanity check, just in case.\n        return 0;\n      }\n\n      if (!banker.qualifiesValid()) {\n        return 1;\n      }\n\n      var hiWinner = Hand.winners([player.hiHand, banker.hiHand]);\n      var loWinner = Hand.winners([player.loHand, banker.loHand]);\n\n      // In Pai Gow Poker, Banker takes any equal valued hands.\n      if (hiWinner.length === 1 && hiWinner[0] === player.hiHand) {\n        if (loWinner.length === 1 && loWinner[0] === player.loHand) {\n          // Player wins both; player wins\n          return 1;\n        }\n        // Player wins hi, Banker wins lo; push\n        return 0;\n      }\n\n      if (loWinner.length === 1 && loWinner[0] === player.loHand) {\n        // Banker wins hi, Player wins lo; push\n        return 0;\n      }\n\n      // Banker wins both; banker wins\n      return -1;\n    }\n\n    /*\n     * Set a full hand into high and low hands, according to manual input.\n     * @param  {Array} hiHand       High hand to specify.\n     *                              Can also be {Hand} with game of 'paigowpokerhi'.\n     * @param  {Array} loHand       Low hand to specify.\n     *                              Can also be {Hand} with game of 'paigowpokerlo'.\n     * @return {PaiGowPokerHelper}  Object with split hands.\n     */\n    static setHands(hiHand, loHand) {\n      var fullHand = [];\n\n      if (Array.isArray(hiHand)) {\n        hiHand = Hand.solve(hiHand, new Game('paigowpokerhi'));\n      }\n      fullHand = fullHand.concat(hiHand.cardPool);\n      if (Array.isArray(loHand)) {\n        loHand = Hand.solve(loHand, new Game('paigowpokerlo'));\n      }\n      fullHand = fullHand.concat(loHand.cardPool);\n\n      var result = new PaiGowPokerHelper(fullHand);\n      result.hiHand = hiHand;\n      result.loHand = loHand;\n\n      return result;\n    }\n\n    /**\n     * Build and return PaiGowPokerHelper object with hands split House Way.\n     * @param  {Array} fullHand    Array of cards (['Ad', '3c', 'Th', ...]).\n     *                             Can also be {Hand} with game of 'paigowpokerfull'.\n     * @return {PaiGowPokerHelper} Object with split hands.\n     */\n    static solve(fullHand) {\n      var result = new PaiGowPokerHelper(fullHand = fullHand || ['']);\n      result.splitHouseWay();\n\n      return result;\n    }\n  }\n\n  var gameRules = {\n    'standard': {\n      'cardsInHand': 5,\n      'handValues': [StraightFlush, FourOfAKind, FullHouse, Flush, Straight, ThreeOfAKind, TwoPair, OnePair, HighCard],\n      'wildValue': null,\n      'wildStatus': 1,\n      'wheelStatus': 0,\n      'sfQualify': 5,\n      'lowestQualified': null,\n      \"noKickers\": false\n    },\n    'jacksbetter': {\n      'cardsInHand': 5,\n      'handValues': [StraightFlush, FourOfAKind, FullHouse, Flush, Straight, ThreeOfAKind, TwoPair, OnePair, HighCard],\n      'wildValue': null,\n      'wildStatus': 1,\n      'wheelStatus': 0,\n      'sfQualify': 5,\n      'lowestQualified': ['Jc', 'Jd', '4h', '3s', '2c'],\n      \"noKickers\": true\n    },\n    'joker': {\n      'cardsInHand': 5,\n      'handValues': [NaturalRoyalFlush, FiveOfAKind, WildRoyalFlush, StraightFlush, FourOfAKind, FullHouse, Flush, Straight, ThreeOfAKind, TwoPair, HighCard],\n      'wildValue': 'O',\n      'wildStatus': 1,\n      'wheelStatus': 0,\n      'sfQualify': 5,\n      'lowestQualified': ['4c', '3d', '3h', '2s', '2c'],\n      \"noKickers\": true\n    },\n    'deuceswild': {\n      'cardsInHand': 5,\n      'handValues': [NaturalRoyalFlush, FourWilds, WildRoyalFlush, FiveOfAKind, StraightFlush, FourOfAKind, FullHouse, Flush, Straight, ThreeOfAKind, HighCard],\n      'wildValue': '2',\n      'wildStatus': 1,\n      'wheelStatus': 0,\n      'sfQualify': 5,\n      'lowestQualified': ['5c', '4d', '3h', '3s', '3c'],\n      \"noKickers\": true\n    },\n    'threecard': {\n      'cardsInHand': 3,\n      'handValues': [StraightFlush, ThreeOfAKind, Straight, Flush, OnePair, HighCard],\n      'wildValue': null,\n      'wildStatus': 1,\n      'wheelStatus': 0,\n      'sfQualify': 3,\n      'lowestQualified': ['Qh', '3s', '2c'],\n      \"noKickers\": false\n    },\n    'fourcard': {\n      'cardsInHand': 4,\n      'handValues': [FourOfAKind, StraightFlush, ThreeOfAKind, Flush, Straight, TwoPair, OnePair, HighCard],\n      'wildValue': null,\n      'wildStatus': 1,\n      'wheelStatus': 0,\n      'sfQualify': 4,\n      'lowestQualified': null,\n      \"noKickers\": true\n    },\n    'fourcardbonus': {\n      'cardsInHand': 4,\n      'handValues': [FourOfAKind, StraightFlush, ThreeOfAKind, Flush, Straight, TwoPair, OnePair, HighCard],\n      'wildValue': null,\n      'wildStatus': 1,\n      'wheelStatus': 0,\n      'sfQualify': 4,\n      'lowestQualified': ['Ac', 'Ad', '3h', '2s'],\n      \"noKickers\": true\n    },\n    'paigowpokerfull': {\n      'cardsInHand': 7,\n      'handValues': [FiveOfAKind, FourOfAKindPairPlus, StraightFlush, Flush, Straight, FourOfAKind, TwoThreeOfAKind, ThreeOfAKindTwoPair, FullHouse, ThreeOfAKind, ThreePair, TwoPair, OnePair, HighCard],\n      'wildValue': 'O',\n      'wildStatus': 0,\n      'wheelStatus': 1,\n      'sfQualify': 5,\n      'lowestQualified': null\n    },\n    'paigowpokeralt': {\n      'cardsInHand': 7,\n      'handValues': [FourOfAKind, FullHouse, ThreeOfAKind, ThreePair, TwoPair, OnePair, HighCard],\n      'wildValue': 'O',\n      'wildStatus': 0,\n      'wheelStatus': 1,\n      'sfQualify': 5,\n      'lowestQualified': null\n    },\n    'paigowpokersf6': {\n      'cardsInHand': 7,\n      'handValues': [StraightFlush, Flush, Straight],\n      'wildValue': 'O',\n      'wildStatus': 0,\n      'wheelStatus': 1,\n      'sfQualify': 6,\n      'lowestQualified': null\n    },\n    'paigowpokersf7': {\n      'cardsInHand': 7,\n      'handValues': [StraightFlush, Flush, Straight],\n      'wildValue': 'O',\n      'wildStatus': 0,\n      'wheelStatus': 1,\n      'sfQualify': 7,\n      'lowestQualified': null\n    },\n    'paigowpokerhi': {\n      'cardsInHand': 5,\n      'handValues': [FiveOfAKind, StraightFlush, FourOfAKind, FullHouse, Flush, Straight, ThreeOfAKind, TwoPair, OnePair, HighCard],\n      'wildValue': 'O',\n      'wildStatus': 0,\n      'wheelStatus': 1,\n      'sfQualify': 5,\n      'lowestQualified': null\n    },\n    'paigowpokerlo': {\n      'cardsInHand': 2,\n      'handValues': [OnePair, HighCard],\n      'wildValue': 'O',\n      'wildStatus': 0,\n      'wheelStatus': 1,\n      'sfQualify': 5,\n      'lowestQualified': null\n    }\n  };\n\n  /**\n   * Base Game class that defines the rules of the game.\n   */\n  class Game {\n    constructor(descr) {\n      this.descr = descr;\n      this.cardsInHand = 0;\n      this.handValues = [];\n      this.wildValue = null;\n      this.wildStatus = 0;\n      this.wheelStatus = 0;\n      this.sfQualify = 5;\n      this.lowestQualified = null;\n      this.noKickers = null;\n\n      // Set values based on the game rules.\n      if (!this.descr || !gameRules[this.descr]) {\n        this.descr = 'standard';\n      }\n      this.cardsInHand = gameRules[this.descr]['cardsInHand'];\n      this.handValues = gameRules[this.descr]['handValues'];\n      this.wildValue = gameRules[this.descr]['wildValue'];\n      this.wildStatus = gameRules[this.descr]['wildStatus'];\n      this.wheelStatus = gameRules[this.descr]['wheelStatus'];\n      this.sfQualify = gameRules[this.descr]['sfQualify'];\n      this.lowestQualified = gameRules[this.descr]['lowestQualified'];\n      this.noKickers = gameRules[this.descr]['noKickers'];\n    }\n  }\n\n  function exportToGlobal(global) {\n    global.Card = Card;\n    global.Hand = Hand;\n    global.Game = Game;\n    global.RoyalFlush = RoyalFlush;\n    global.NaturalRoyalFlush = NaturalRoyalFlush;\n    global.WildRoyalFlush = WildRoyalFlush;\n    global.FiveOfAKind = FiveOfAKind;\n    global.StraightFlush = StraightFlush;\n    global.FourOfAKindPairPlus = FourOfAKindPairPlus;\n    global.FourOfAKind = FourOfAKind;\n    global.FourWilds = FourWilds;\n    global.TwoThreeOfAKind = TwoThreeOfAKind;\n    global.ThreeOfAKindTwoPair = ThreeOfAKindTwoPair;\n    global.FullHouse = FullHouse;\n    global.Flush = Flush;\n    global.Straight = Straight;\n    global.ThreeOfAKind = ThreeOfAKind;\n    global.ThreePair = ThreePair;\n    global.TwoPair = TwoPair;\n    global.OnePair = OnePair;\n    global.HighCard = HighCard;\n    global.PaiGowPokerHelper = PaiGowPokerHelper;\n  }\n\n  // Export the classes for node.js use.\n  if (typeof exports !== 'undefined') {\n    exportToGlobal(exports);\n  }\n\n  // Add the classes to the window for browser use.\n  if (typeof window !== 'undefined') {\n    exportToGlobal(window);\n  }\n\n})();\n","// by GPT4.0\r\nconst pokersolver = require('pokersolver');\r\nconst Hand = pokersolver.Hand;\r\n\r\n// const suits = ['c', 'd', 'h', 's'];\r\nconst suits = ['♠', '♥', '♦', '♣'];\r\nconst ranks = '23456789TJQKA';\r\n\r\nfunction calculateWinRate(playerHand, communityCards) {\r\n  let wins = 0;\r\n  let ties = 0;\r\n  let total = 0;\r\n\r\n  const unexposedCards = [];\r\n  for (const suit of suits) {\r\n    for (const rank of ranks) {\r\n      const card = rank + suit;\r\n      if (!playerHand.includes(card) && !communityCards.includes(card)) {\r\n        unexposedCards.push(card);\r\n      }\r\n    }\r\n  }\r\n\r\n  const communityCombinations = unexposedCards.length >= 5 - communityCards.length\r\n    ? k_combinations(unexposedCards, 5 - communityCards.length)\r\n    : [communityCards];\r\n\r\n  for (const community of communityCombinations) {\r\n    const fullCommunity = community.concat(communityCards);\r\n    const playerBestHand = Hand.solve(playerHand.concat(fullCommunity));\r\n\r\n    for (const card1 of unexposedCards) {\r\n      if (community.includes(card1)) continue;\r\n      for (const card2 of unexposedCards) {\r\n        if (community.includes(card2) || card1 === card2) continue;\r\n        const opponentHand = [card1, card2];\r\n        const opponentBestHand = Hand.solve(opponentHand.concat(fullCommunity));\r\n        const winner = Hand.winners([playerBestHand, opponentBestHand]);\r\n\r\n        if (winner.length === 1 && winner[0] === playerBestHand) {\r\n          wins++;\r\n        } else if (winner.length === 2) {\r\n          ties++;\r\n        }\r\n        total++;\r\n      }\r\n    }\r\n  }\r\n\r\n  return {\r\n    winRate: wins / total,\r\n    tieRate: ties / total\r\n  };\r\n}\r\n\r\nfunction k_combinations(set, k) {\r\n  const combinations = [];\r\n  const n = set.length;\r\n\r\n  function helper(start, comb) {\r\n    if (comb.length === k) {\r\n      combinations.push(comb.slice());\r\n      return;\r\n    }\r\n\r\n    for (let i = start; i < n; i++) {\r\n      comb.push(set[i]);\r\n      helper(i + 1, comb);\r\n      comb.pop();\r\n    }\r\n  }\r\n\r\n  helper(0, []);\r\n  return combinations;\r\n}\r\nfunction monteCarloSimulation(playerHand, communityCards, numSimulations = 10000) {\r\n  let wins = 0;\r\n  let ties = 0;\r\n  let total = 0;\r\n\r\n  for (let i = 0; i < numSimulations; i++) {\r\n    const [opponentHand, fullCommunity] = generateRandomHandAndCommunity(playerHand, communityCards);\r\n    const playerBestHand = Hand.solve(playerHand.concat(fullCommunity));\r\n    const opponentBestHand = Hand.solve(opponentHand.concat(fullCommunity));\r\n    const winner = Hand.winners([playerBestHand, opponentBestHand]);\r\n\r\n    if (winner.length === 1 && winner[0] === playerBestHand) {\r\n      wins++;\r\n    } else if (winner.length === 2) {\r\n      ties++;\r\n    }\r\n    total++;\r\n  }\r\n\r\n  return {\r\n    winRate: wins / total,\r\n    tieRate: ties / total\r\n  };\r\n}\r\n\r\nfunction generateRandomHandAndCommunity(playerHand, communityCards) {\r\n  const unexposedCards = [];\r\n  for (const suit of suits) {\r\n    for (const rank of ranks) {\r\n      const card = rank + suit;\r\n      if (!playerHand.includes(card) && !communityCards.includes(card)) {\r\n        unexposedCards.push(card);\r\n      }\r\n    }\r\n  }\r\n\r\n  const opponentHand = [];\r\n  for (let i = 0; i < 2; i++) {\r\n    const randomIndex = Math.floor(Math.random() * unexposedCards.length);\r\n    opponentHand.push(unexposedCards.splice(randomIndex, 1)[0]);\r\n  }\r\n\r\n  const numCommunityCardsNeeded = 5 - communityCards.length;\r\n  const fullCommunity = communityCards.slice();\r\n  for (let i = 0; i < numCommunityCardsNeeded; i++) {\r\n    const randomIndex = Math.floor(Math.random() * unexposedCards.length);\r\n    fullCommunity.push(unexposedCards.splice(randomIndex, 1)[0]);\r\n  }\r\n\r\n  return [opponentHand, fullCommunity];\r\n}\r\n\r\n// const playerHand = ['Ah', 'Ks'];\r\n// const communityCards = ['Qd', 'Js', 'Th'];\r\n// // const result = calculateWinRate(playerHand, communityCards);\r\n// const result = monteCarloSimulation(playerHand, communityCards);\r\n// console.log(`胜率：${result.winRate.toFixed(4)}，平局率：${result.tieRate.toFixed(4)}`);\r\n\r\nmodule.exports = {\r\n  monteCarloSimulation\r\n}","var { monteCarloSimulation } = require(\"./p2\");\n\nwindow.addValue = function (value) {\n  var cardNumber = document.getElementById(\"card-number\");\n  cardNumber.value += value;\n}\nwindow.cal = function () {\n  var cardNumber = document.getElementById(\"card-number\").value;\n  const arr = [];\n\n  for (let i = 0; i < cardNumber.length; i += 2) {\n    const chunk = cardNumber.slice(i, i + 2);\n    arr.push(chunk);\n  }\n\n  // Do calculation here\n  const p = arr.slice(0, 2)\n  const b = arr.slice(2)\n  //获取要更改文本的元素\n  const element = document.getElementById(\"result\");\n  //修改文本内容\n  element.textContent = `计算中...`;\n  const result = monteCarloSimulation(p, b, 100000);\n  console.log(p, b, result)\n  //修改文本内容\n  element.textContent = `win:${(result.winRate * 100).toFixed(2)},tie:${(result.tieRate * 100).toFixed(2)}`;\n}\nwindow.reset = function () {\n  var cardNumber = document.getElementById(\"card-number\");\n  cardNumber.value = \"\";\n  const element = document.getElementById(\"result\");\n  //修改文本内容\n  element.textContent = ``;\n}"]}